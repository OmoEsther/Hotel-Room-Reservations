{"version":3,"sources":["contracts/hotel_approval.teal","contracts/hotel_clear.teal","utils/conversions.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/hotel-reservation/AddRoom.jsx","components/hotel-reservation/Room.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/hotel-reservation/Rooms.jsx","assets/img/hotelroom.jpg","App.js","reportWebVitals.js","index.js","utils/hotel-reservation.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","convertTime","secs","dateObj","Date","toLocaleDateString","weekday","year","month","day","toLocaleString","hour","minute","hour12","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddRoom","createNewRoom","useState","setName","image","setImage","description","setDescription","price","setPrice","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","max","Footer","disabled","Room","room","makeReservation","endReservation","deleteRoom","appId","reservedTo","reserveEnds","isReserved","appCreator","date","now","noOfNights","setNoOfNights","roomIsReserved","Col","Card","Badge","bg","objectFit","Text","min","Number","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Rooms","fetchBalance","rooms","setRooms","loading","setLoading","getRooms","a","getRoomsAction","then","catch","error","console","log","finally","_","useEffect","data","createRoomAction","toast","makeReservationAction","endReservationAction","deleteroomAction","Row","xs","sm","lg","map","index","App","setAddress","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","appAddress","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","hotelNote","algosdk","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","appCallArg","noOfNightsArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","totalAmount","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","fee","ALGORAND_MIN_TX_FEE","flatFee","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getApplicationAddress","getField","fieldName","find","state","key","undefined","field","bytes","uint","encodeAddress","Base64","toUint8Array","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"8HAAe,85D,mCCAA,sC,iGCAf,qPAGaA,EAAqB,SAACC,GACjC,OAAOC,EAAOC,KAAKF,EAAc,UAAUG,SAAS,QACrD,EAEYC,EAAqB,SAACC,GACjC,OAAOJ,EAAOC,KAAKG,EAAY,QAAQF,SAAS,SACjD,EAGYG,EAAkB,SAACC,GAC9B,GAAKA,EACL,OACEA,EAAQC,MAAM,EAAG,GACjB,MACAD,EAAQC,MAAMD,EAAQE,OAAS,EAAGF,EAAQE,OAE7C,EAGYC,EAAqB,SAACC,GACjC,GAAKA,EAEL,OADgB,IAAIC,IAAUD,GACbE,WAAWC,KAAmBC,QAAQ,EACxD,EAGYC,EAAqB,SAACC,GACjC,GAAKA,EAEL,OADgB,IAAIL,IAAUK,GACbJ,UAAUC,KAAmBI,UAC/C,EAEYC,EAAc,SAACC,GAC1B,GAAa,IAATA,EACF,MAAO,KAGT,IAAIC,EAAU,IAAIC,KAAY,IAAPF,GAavB,OAXWC,EAAQE,mBAAmB,QAAS,CAC7CC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,YAOO,KALHN,EAAQO,eAAe,QAAS,CACzCC,KAAM,UACNC,OAAQ,UACRC,QAAQ,GAGX,C,iWCnBcC,EA/BD,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAC5B,OACI,sBAAKC,UAAU,4EAAf,UACI,sBAAKA,UAAU,0BAAf,UACI,qBACIA,UAAU,gCACVC,MAAO,CAACC,SAAU,SAFtB,SAII,qBAAKC,IAAKL,EAAUM,IAAI,OAE5B,6BAAKP,IACL,wEACA,cAACQ,EAAA,EAAD,CACIC,QAAS,kBAAMP,GAAN,EACTQ,QAAQ,gBACRP,UAAU,yBAHd,+BAQJ,mBAAGA,UAAU,yBAAb,mCAGX,E,iGCbcQ,EAXG,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMtC,EAAR,EAAQA,QAAYuC,EAApB,wBACd,+CAASA,GAAT,IAAeT,MAAO,CAACU,MAAM,GAAD,OAAKF,EAAL,MAAeG,OAAO,GAAD,OAAKH,EAAL,OAAjD,SACI,cAAC,IAAD,CAAUI,SAAUJ,EAAMK,KAAMC,SAAS5C,EAAQC,MAAM,EAAG,IAAK,QAFrD,ECuDH4C,EApDA,SAAC,GAAiD,IAAhD7C,EAA+C,EAA/CA,QAAS0B,EAAsC,EAAtCA,KAAMoB,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,WAC5C,OAAKhD,EAID,mCACI,eAACiD,EAAA,EAAD,WACI,eAACA,EAAA,EAASC,OAAV,CAAiBd,QAAQ,QAAQe,MAAM,MAAMC,GAAG,iBAC/BvB,UAAU,qDAD3B,UAEKiB,EACG,qCACK3C,YAAmB2C,GACpB,uBAAMjB,UAAU,OAAhB,cAAyBkB,QAG7B,cAACM,EAAA,EAAD,CAASC,UAAU,SAAShB,KAAK,KAAKT,UAAU,eAEpD,cAAC,EAAD,CAAW7B,QAASA,EAASsC,KAAM,GAAIT,UAAU,iBAGrD,eAACoB,EAAA,EAASM,KAAV,CAAe1B,UAAU,qBAAzB,UACI,cAACoB,EAAA,EAASO,KAAV,CAAeC,KAAI,kDAA6CzD,GACjD0D,OAAO,SADtB,SAEI,eAACC,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACI,mBAAGhC,UAAU,6BACb,sBAAKA,UAAU,qBAAf,UACKH,GAAS,sBAAMG,UAAU,iBAAhB,SAAkCH,IAC5C,sBAAMG,UAAU,iBAAhB,SAAkC9B,YAAgBC,aAI9D,cAACiD,EAAA,EAASa,QAAV,IACA,eAACb,EAAA,EAASO,KAAV,CAAeO,GAAG,SAASlC,UAAU,4BAA4BM,QAAS,WACtEa,GACH,EAFD,UAGI,mBAAGnB,UAAU,oCAHjB,wBA9BL,IAwCd,E,qDC0EcmC,EArHC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACjB,EAAwBC,mBAAS,IAAjC,mBAAOxC,EAAP,KAAayC,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAA0BL,mBAAS,GAAnC,mBAAOM,EAAP,KAAcC,EAAd,KAEMC,EAAeC,uBAAY,WAC/B,OAAOjD,GAAQ0C,GAASE,GAAeE,EAAQ,CAChD,GAAE,CAAC9C,EAAM0C,EAAOE,EAAaE,IAE9B,EAAwBN,oBAAS,GAAjC,mBAAOU,EAAP,KAAaC,EAAb,KAEMC,EAAc,kBAAMD,GAAQ,EAAd,EAGpB,OACE,qCACE,cAAC3C,EAAA,EAAD,CACEC,QALa,kBAAM0C,GAAQ,EAAd,EAMbzC,QAAQ,OACRP,UAAU,oBACVC,MAAO,CAAEU,MAAO,QAJlB,SAME,mBAAGX,UAAU,iBAEf,eAACkD,EAAA,EAAD,CAAOH,KAAMA,EAAMI,OAAQF,EAAaG,UAAQ,EAAhD,UACE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,yBAEF,cAACC,EAAA,EAAD,UACE,eAACN,EAAA,EAAMO,KAAP,WACE,cAACC,EAAA,EAAD,CACEC,UAAU,YACVC,MAAM,YACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,SAAU,SAACC,GACT1B,EAAQ0B,EAAEnC,OAAOoC,MAClB,EACDC,YAAY,sBAGhB,cAACR,EAAA,EAAD,CACEC,UAAU,WACVC,MAAM,YACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLI,YAAY,YACZD,MAAO1B,EACPwB,SAAU,SAACC,GACTxB,EAASwB,EAAEnC,OAAOoC,MACnB,MAGL,cAACP,EAAA,EAAD,CACEC,UAAU,mBACVC,MAAM,cACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACE3B,GAAG,WACHgC,YAAY,cACZjE,MAAO,CAAEW,OAAQ,QACjBuD,IAAK,IACLJ,SAAU,SAACC,GACTtB,EAAesB,EAAEnC,OAAOoC,MACzB,MAGL,cAACP,EAAA,EAAD,CACEC,UAAU,aACVC,MAAM,0BACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLI,YAAY,QACZH,SAAU,SAACC,GACTpB,EAAShE,YAAmBoF,EAAEnC,OAAOoC,OACtC,WAKT,eAACf,EAAA,EAAMkB,OAAP,WACE,cAAC/D,EAAA,EAAD,CAAQE,QAAQ,oBAAoBD,QAAS2C,EAA7C,mBAGA,cAAC5C,EAAA,EAAD,CACEE,QAAQ,OACR8D,UAAWxB,IACXvC,QAAS,WACP8B,EAAc,CACZvC,OACA0C,QACAE,cACAE,UAEFM,GACD,EAXH,mCAmBT,E,2BCsBcqB,EAxHF,SAAC,GAMP,IALLnG,EAKI,EALJA,QACAoG,EAII,EAJJA,KACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,eACAC,EACI,EADJA,WAGEC,EASEJ,EATFI,MACA9E,EAQE0E,EARF1E,KACA0C,EAOEgC,EAPFhC,MACAE,EAME8B,EANF9B,YACAE,EAKE4B,EALF5B,MACAiC,EAIEL,EAJFK,WACAC,EAGEN,EAHFM,YACAC,EAEEP,EAFFO,WACAC,EACER,EADFQ,WAGIC,EAAO9F,KAAK+F,MAElB,EAAoC5C,mBAAS,GAA7C,mBAAO6C,EAAP,KAAmBC,EAAnB,KAEMC,EAAiB,kBAAqB,IAAfN,CAAN,EAGvB,OACE,cAACO,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMtF,UAAU,QAAhB,UACE,cAACsF,EAAA,EAAKjC,OAAN,UACE,eAACvB,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACE,sBAAMhC,UAAU,gCAAhB,SACG4E,EAAa1G,YAAgB0G,GAAc,+BAE9C,cAAC,EAAD,CAAWnE,KAAM,GAAItC,QAASyG,IAC9B,cAACW,EAAA,EAAD,CAAOC,GAAG,YAAYxF,UAAU,UAAhC,SACGoF,IAAmB,WAAa,mBAIvC,qBAAKpF,UAAU,kBAAf,SACE,qBAAKG,IAAKoC,EAAOnC,IAAKP,EAAMI,MAAO,CAAEwF,UAAW,aAElD,eAACH,EAAA,EAAK7B,KAAN,CAAWzD,UAAU,iCAArB,UACE,cAACsF,EAAA,EAAK/B,MAAN,UAAa1D,IACb,cAACyF,EAAA,EAAKI,KAAN,CAAW1F,UAAU,cAArB,SAAoCyC,IACpC,cAAC6C,EAAA,EAAKI,KAAN,CAAW1F,UAAU,cAArB,SACG6E,EAAW,4BAAwB9F,YAAY8F,IAAiB,KAEnE,eAACrB,EAAA,EAAD,CAAMxD,UAAU,8CAAhB,UACG4E,IAAezG,GAAWiH,IACzB,cAAC/E,EAAA,EAAD,CACEE,QAAQ,eACRD,QAAS,kBAAMmE,EAAeF,EAArB,EACTF,WA7BiBW,GAAQ,IAAI9F,KAAmB,IAAd2F,IA8BlC7E,UAAU,aAJZ,6BAQEoF,IACF,mCACE,cAAC/E,EAAA,EAAD,CACEE,QAAQ,eACR8D,SAAUe,IACVpF,UAAU,aAHZ,wBASF,qCACE,cAAC0D,EAAA,EAAD,CACEC,UAAU,aACVC,MAAM,SACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACEC,KAAK,SACLG,MAAOiB,EACPS,IAAI,IACJtB,SAAUe,IACVrB,SAAU,SAACC,GACTmB,EAAcS,OAAO5B,EAAEnC,OAAOoC,OAC/B,MAGL,eAAC5D,EAAA,EAAD,CACEE,QAAQ,eACR8D,SAAUe,IACV9E,QAAS,kBAAMkE,EAAgBD,EAAMW,EAA5B,EACTlF,UAAU,YAJZ,yBAMe1B,YAAmBqE,GAASuC,EAN3C,cAUHH,IAAe5G,GACd,cAACkC,EAAA,EAAD,CACEE,QAAQ,iBACRD,QAAS,kBAAMoE,EAAWH,EAAjB,EACTvE,UAAU,MAHZ,SAKE,mBAAGA,UAAU,4BA3Ef2E,EAmFb,ECrHckB,EARA,kBACX,qBAAK7F,UAAU,gCAAf,SACI,cAACwB,EAAA,EAAD,CAASC,UAAU,SAASqE,KAAK,SAAS9F,UAAU,aAApD,SACI,sBAAMA,UAAU,kBAAhB,2BAHG,ECCT+F,EAAe,kBACjB,cAAC,IAAD,CACIC,SAAS,gBACTC,UAAW,IACXC,iBAAe,EACfC,aAAW,EACXC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAW,EACXC,cAAY,GAVC,EAcfC,EAAsB,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACxB,gCACI,mBAAG1G,UAAU,8CACb,sBAAMA,UAAU,sBAAhB,SAAuC0G,MAHnB,EAOtBC,EAAoB,SAAC,GAAD,IAAED,EAAF,EAAEA,KAAF,OACtB,gCACI,mBAAG1G,UAAU,yCACb,sBAAMA,UAAU,sBAAhB,SAAuC0G,MAHrB,EAWpBE,EAAe,CACjBF,KAAM,IAIVD,EAAoBI,aAAeD,EAGnCD,EAAkBE,aAAeD,E,qBC4FlBE,EAxHD,SAAC,GAA+B,IAA7B3I,EAA4B,EAA5BA,QAAS4I,EAAmB,EAAnBA,aACxB,EAA0B1E,mBAAS,IAAnC,mBAAO2E,EAAP,KAAcC,EAAd,KACA,EAA8B5E,oBAAS,GAAvC,mBAAO6E,EAAP,KAAgBC,EAAhB,KAEMC,EAAQ,uCAAG,sBAAAC,EAAA,sDACfF,GAAW,GACXG,cACGC,MAAK,SAACP,GACDA,GACFC,EAASD,EAEZ,IACAQ,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACb,IACAG,SAAQ,SAACC,GACRV,GAAW,EACZ,IAbY,2CAAH,qDAgBdW,qBAAU,WACRV,GACD,GAAE,IAEH,IAAMhF,EAAa,uCAAG,WAAO2F,GAAP,SAAAV,EAAA,sDACpBF,GAAW,GACXa,YAAiB7J,EAAS4J,GACvBR,MAAK,WACJU,YAAM,cAAC,EAAD,CAAqBvB,KAAK,8BAChCU,IACAL,EAAa5I,EACd,IACAqJ,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZQ,YAAM,cAAC,EAAD,CAAmBvB,KAAK,4BAC9BS,GAAW,EACZ,IAZiB,2CAAH,sDAeb3C,EAAe,uCAAG,WAAOD,EAAMW,GAAb,SAAAmC,EAAA,sDACtBF,GAAW,GACXe,YAAsB/J,EAASoG,EAAMW,GAClCqC,MAAK,WACJU,YAAM,cAAC,EAAD,CAAqBvB,KAAK,mCAChCU,IACAL,EAAa5I,EACd,IACAqJ,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZQ,YAAM,cAAC,EAAD,CAAmBvB,KAAK,iCAC9BS,GAAW,EACZ,IAZmB,2CAAH,wDAef1C,EAAc,uCAAG,WAAOF,GAAP,SAAA8C,EAAA,sDACrBF,GAAW,GACXgB,YAAqBhK,EAASoG,GAC3BgD,MAAK,WACJU,YAAM,cAAC,EAAD,CAAqBvB,KAAK,oCAChCU,IACAL,EAAa5I,EACd,IACAqJ,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZQ,YAAM,cAAC,EAAD,CAAmBvB,KAAK,gCAC9BS,GAAW,EACZ,IAZkB,2CAAH,sDAedzC,EAAU,uCAAG,WAAOH,GAAP,SAAA8C,EAAA,sDACjBF,GAAW,GACXiB,YAAiBjK,EAASoG,EAAKI,OAC5B4C,MAAK,WACJU,YAAM,cAAC,EAAD,CAAqBvB,KAAK,+BAChCU,IACAL,EAAa5I,EACd,IACAqJ,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZQ,YAAM,cAAC,EAAD,CAAmBvB,KAAK,4BAC9BS,GAAW,EACZ,IAZc,2CAAH,sDAehB,OAAID,EACK,cAAC,EAAD,IAGP,qCACE,sBAAKlH,UAAU,yDAAf,UACE,oBAAIA,UAAU,oBAAd,qCACA,cAAC,EAAD,CAASoC,cAAeA,OAE1B,sBAAKpC,UAAU,OAAf,UACE,mBAAGA,UAAU,oBADf,iDAIA,cAACqI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGxI,UAAU,0BAApC,SACE,mCACGgH,EAAMyB,KAAI,SAAClE,EAAMmE,GAAP,OACT,cAAC,EAAD,CACEvK,QAASA,EACToG,KAAMA,EACNC,gBAAiBA,EACjBC,eAAgBA,EAChBC,WAAYA,GACPgE,EAPE,UAcpB,E,OCjIc,MAA0B,sCCgF1BC,EAtEH,WACV,MAA8BtG,mBAAS,MAAvC,mBAAOlE,EAAP,KAAgByK,EAAhB,KACA,EAAwBvG,mBAAS,MAAjC,mBAAOxC,EAAP,KAAayC,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOwG,EAAP,KAAgBC,EAAhB,KAEM/B,EAAY,uCAAG,WAAOgC,GAAP,SAAA1B,EAAA,sDACnB2B,IACGC,kBAAkBF,GAClBG,KACA3B,MAAK,SAAC4B,GACL,IAAMC,EAAWD,EAASE,QAAQpI,OAClC6H,EAAWM,EACZ,IACA5B,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACb,IAVgB,2CAAH,sDAaZ6B,EAAa,uCAAG,sBAAAjC,EAAA,sDACpBkC,IACGxJ,UACAwH,MAAK,SAACiC,GACL,IAAMC,EAAWD,EAAS,GAC1BZ,EAAWa,EAAStL,SACpBmE,EAAQmH,EAAS5J,MACjBkH,EAAa0C,EAAStL,QACvB,IACAqJ,OAAM,SAACC,GACNC,QAAQC,IAAI,sCACZD,QAAQD,MAAMA,EACf,IAZiB,2CAAH,qDAqBnB,OACE,qCACE,cAAC,EAAD,IACCtJ,EACC,eAACuL,EAAA,EAAD,CAAWC,MAAM,KAAjB,UACE,cAACC,EAAA,EAAD,CAAK5J,UAAU,gCAAf,SACE,cAAC4J,EAAA,EAAIjI,KAAL,UACE,cAAC,EAAD,CACExD,QAASA,EACT0B,KAAMA,EACNoB,OAAQ4H,EACR1H,WAjBK,WACjByH,EAAW,MACXtG,EAAQ,MACRwG,EAAW,KACZ,EAca5H,OAAQ,aAId,+BACE,cAAC,EAAD,CAAO/C,QAASA,EAAS4I,aAAcA,SAI3C,cAAC,EAAD,CACElH,KAAM,0BACNC,SAAUA,EACVC,QAASuJ,MAKlB,EChEcO,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxC,MAAK,YAEnB,IADLyC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACT,GAEJ,E,qBCJDO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,G,yUCAMvF,E,aACJ,WACES,EACAJ,EACA+F,EACA7K,EACA0C,EACAE,EACAE,EACAiC,EACAC,EACAC,GACC,oBACD6F,KAAKhG,MAAQA,EACbgG,KAAK5F,WAAaA,EAClB4F,KAAKD,WAAaA,EAClBC,KAAK9K,KAAOA,EACZ8K,KAAKpI,MAAQA,EACboI,KAAKlI,YAAcA,EACnBkI,KAAKhI,MAAQA,EACbgI,KAAK/F,WAAaA,EAClB+F,KAAK9F,YAAcA,EACnB8F,KAAK7F,WAAaA,CACnB,IAIG8F,EAAc,uCAAG,WAAOC,GAAP,mBAAAxD,EAAA,6DACjByD,EAAU,IAAIC,YACdC,EAAeF,EAAQG,OAAOJ,GAFb,SAGOK,IAAYC,QAAQH,GAAc9B,KAHzC,cAGjBkC,EAHiB,yBAId,IAAIC,WAAWxN,EAAOC,KAAKsN,EAAgBE,OAAQ,YAJrC,2CAAH,sDAQPtD,EAAgB,uCAAG,WAAOuD,EAAehH,GAAtB,2CAAA8C,EAAA,6DAC9BK,QAAQC,IAAI,kBADkB,SAGXuD,IAAYM,uBAAuBtC,KAHxB,cAG1BuC,EAH0B,gBAMQb,EAAec,KANvB,cAMxBC,EANwB,gBAOKf,EAAegB,KAPpB,cAOxBC,EAPwB,OAU1BC,GAAO,IAAIf,aAAcE,OAAOc,KAChClM,GAAO,IAAIkL,aAAcE,OAAO1G,EAAK1E,MACrC0C,GAAQ,IAAIwI,aAAcE,OAAO1G,EAAKhC,OACtCE,GAAc,IAAIsI,aAAcE,OAAO1G,EAAK9B,aAC5CE,EAAQqJ,IAAQC,aAAa1H,EAAK5B,OAElCuJ,EAAU,CAACrM,EAAM0C,EAAOE,EAAaE,GAGrCwJ,EAAMH,IAAQI,mCAAmC,CACnDtO,KAAMyN,EACNc,gBAAiBZ,EACjBa,WAAYN,IAAQO,sBAAsBC,OAC1Cd,gBAAiBC,EACjBC,aAAcC,EACdY,aAAcA,IACdC,mBAAoBC,IACpBC,cAAeA,IACfC,oBAAqBC,IACrBhB,KAAMA,EACNI,QAASA,IAIPa,EAAOZ,EAAIa,OAAOjP,WAlCQ,UAqCRwL,IAAc0D,gBAAgBd,EAAIe,UArC1B,eAqC1BC,EArC0B,OAsC9BzF,QAAQC,IAAI,mCAAoCoF,GAtClB,UAuCxB7B,IAAYkC,mBAAmBD,EAAUE,MAAMnE,KAvCvB,yBA0CL8C,IAAQsB,oBAAoBpC,IAAa6B,EAAM,GA1C1C,eA0C1BQ,EA1C0B,OA6C9B7F,QAAQC,IACN,eACEoF,EACA,uBACAQ,EAAa,oBAjDa,UAqDErC,IAC7BsC,8BAA8BT,GAC9B7D,KAvD2B,eAqD1BuE,EArD0B,OAwD1B9I,EAAQ8I,EAAoB,qBAChC/F,QAAQC,IAAI,uBAAwBhD,GAzDN,kBA0DvBA,GA1DuB,4CAAH,wDA8DhBuD,EAAqB,uCAAG,WACnCqD,EACAhH,EACAW,GAHmC,uCAAAmC,EAAA,6DAKnCK,QAAQC,IAAI,qBALuB,SAOhBuD,IAAYM,uBAAuBtC,KAPnB,OAqCnC,IA9BIuC,EAP+B,OAU/BiC,GAAa,IAAI3C,aAAcE,OAAO,QACtC0C,EAAgB3B,IAAQC,aAAa/G,GACrCgH,EAAU,CAACwB,EAAYC,GAGvBC,EAAa5B,IAAQ6B,iCAAiC,CACxD/P,KAAMyN,EACNuC,SAAUvJ,EAAKI,MACf2H,WAAYN,IAAQO,sBAAsBC,OAC1CH,gBAAiBZ,EACjBS,QAASA,IAGP6B,EAAcxJ,EAAK5B,MAAQuC,EAAa,IAGxC8I,EAAahC,IAAQiC,4CAA4C,CACnEnQ,KAAMyN,EACN2C,GAAI3J,EAAKmG,WACTzJ,OAAQ8M,EACR1B,gBAAiBZ,IAGf0C,EAAW,CAACP,EAAYI,GAGxBI,EAAUpC,IAAQqC,eAAeF,GAC5BG,EAAI,EAAGA,EAAI,EAAGA,IAAKH,EAASG,GAAGC,MAAQH,EArCb,iBAwCb7E,IAAc0D,gBAClCkB,EAAS1F,KAAI,SAAC0D,GAAD,OAASA,EAAIe,QAAb,KAzCoB,eAwC/BC,EAxC+B,OA2CnCzF,QAAQC,IAAI,4BA3CuB,UA4CpBuD,IACZkC,mBAAmBD,EAAU1E,KAAI,SAAC0D,GAAD,OAASA,EAAIkB,IAAb,KACjCnE,KA9CgC,eA4C/BsF,EA5C+B,iBAiDVxC,IAAQsB,oBAAoBpC,IAAasD,EAAGzB,KAAM,GAjDxC,QAiD/BQ,EAjD+B,OAoDnC7F,QAAQC,IACN,qBACE6G,EAAGzB,KACH,uBACAQ,EAAa,oBAxDkB,4CAAH,0DA6DrBpF,EAAoB,uCAAG,WAAOoD,EAAehH,GAAtB,2BAAA8C,EAAA,6DAClCK,QAAQC,IAAI,yBADsB,SAGfuD,IAAYM,uBAAuBtC,KAHpB,cAG9BuC,EAH8B,QAI3BgD,IAAoC,EAA9BzC,IAAQ0C,oBACrBjD,EAAOkD,SAAU,EAGbjB,GAAa,IAAI3C,aAAcE,OAAO,OACtCiB,EAAU,CAACwB,GAGXE,EAAa5B,IAAQ6B,iCAAiC,CACxD/P,KAAMyN,EACNuC,SAAUvJ,EAAKI,MACf2H,WAAYN,IAAQO,sBAAsBC,OAC1CH,gBAAiBZ,EACjBS,QAASA,IAIPa,EAAOa,EAAWZ,OAAOjP,WArBK,UAwBZwL,IAAc0D,gBAAgBW,EAAWV,UAxB7B,eAwB9BC,EAxB8B,OAyBlCzF,QAAQC,IAAI,mCAAoCoF,GAzBd,UA0B5B7B,IAAYkC,mBAAmBD,EAAUE,MAAMnE,KA1BnB,yBA6BP8C,IAAQsB,oBAAoBpC,IAAa6B,EAAM,GA7BxC,QA6B5BQ,EA7B4B,OAgClC7F,QAAQC,IACN,eACEoF,EACA,uBACAQ,EAAa,oBApCiB,4CAAH,wDAyCpBnF,EAAgB,uCAAG,WAAOmD,EAAe7C,GAAtB,2BAAArB,EAAA,6DAC9BK,QAAQC,IAAI,2BADkB,SAGXuD,IAAYM,uBAAuBtC,KAHxB,cAG1BuC,EAH0B,OAM1BU,EAAMH,IAAQ4C,mCAAmC,CACnD9Q,KAAMyN,EACNc,gBAAiBZ,EACjBqC,SAAUpF,IAIRqE,EAAOZ,EAAIa,OAAOjP,WAbQ,SAgBRwL,IAAc0D,gBAAgBd,EAAIe,UAhB1B,cAgB1BC,EAhB0B,OAiB9BzF,QAAQC,IAAI,mCAAoCoF,GAjBlB,UAkBxB7B,IAAYkC,mBAAmBD,EAAUE,MAAMnE,KAlBvB,yBAqBH8C,IAAQsB,oBAAoBpC,IAAa6B,EAAM,GArB5C,eAqBxBQ,EArBwB,OAwB9B7F,QAAQC,IACN,eACEoF,EACA,uBACAQ,EAAa,oBA5Ba,UAgCErC,IAC7BsC,8BAA8BT,GAC9B7D,KAlC2B,QAgC1BuE,EAhC0B,OAmC1B9I,EAAQ8I,EAAmB,IAAnB,IAAkCoB,KAC9CnH,QAAQC,IAAI,mBAAoBhD,GApCF,4CAAH,wDAwChB2C,EAAc,uCAAG,4CAAAD,EAAA,6DAC5BK,QAAQC,IAAI,qBACRmE,GAAO,IAAIf,aAAcE,OAAOc,KAChC+C,EAAcjR,EAAOC,KAAKgO,GAAM/N,SAAS,UAHjB,SAMAiL,IACzB+F,wBACAC,WAAWF,GACXG,OAAO,QACPC,SAASA,KACThG,KAXyB,OAMxBiG,EANwB,OAaxBnI,EAAQ,GAbgB,cAcFmI,EAAgBC,cAdd,6DAcjBC,EAdiB,UAetB1K,EAAQ0K,EAAY,8BAfE,kCAkBPC,EAAe3K,GAlBR,SAkBpBJ,EAlBoB,SAoBtByC,EAAMuI,KAAKhL,GApBW,uJAwB5BmD,QAAQC,IAAI,kBAxBgB,kBAyBrBX,GAzBqB,gEAAH,qDA4BrBsI,EAAc,uCAAG,WAAO3K,GAAP,6CAAA0C,EAAA,+EAGE2B,IAClBwG,mBAAmB7K,GACnB8K,YAAW,GACXvG,KANgB,YAGfC,EAHe,QAONuG,YAAYC,QAPN,yCAQV,MARU,cAUfC,EAAczG,EAASuG,YAAYjE,OAAO,gBAG1C1G,EAAaoE,EAASuG,YAAYjE,OAAOoE,QACzCnF,EAAasB,IAAQ8D,sBAAsBnL,GAC3C9E,EAAO,GACP0C,EAAQ,GACRE,EAAc,GACdE,EAAQ,EACRiC,EAAa,GACbC,EAAc,EACdC,EAAa,EAEXiL,EAAW,SAACC,EAAWJ,GAC3B,OAAOA,EAAYK,MAAK,SAACC,GACvB,OAAOA,EAAMC,MAAQnS,YAAmBgS,EACzC,GACF,OAEqCI,IAAlCL,EAAS,OAAQH,KACfS,EAAQN,EAAS,OAAQH,GAAa3L,MAAMqM,MAChDzQ,EAAOlC,YAAmB0S,SAGWD,IAAnCL,EAAS,QAASH,KAChBS,EAAQN,EAAS,QAASH,GAAa3L,MAAMqM,MACjD/N,EAAQ5E,YAAmB0S,SAGgBD,IAAzCL,EAAS,cAAeH,KACtBS,EAAQN,EAAS,cAAeH,GAAa3L,MAAMqM,MACvD7N,EAAc9E,YAAmB0S,SAGID,IAAnCL,EAAS,QAASH,KACpBjN,EAAQoN,EAAS,QAASH,GAAa3L,MAAMsM,WAGDH,IAA1CL,EAAS,eAAgBH,KAC3B/K,EAAckL,EAAS,eAAgBH,GAAa3L,MAAMsM,WAGlBH,IAAtCL,EAAS,WAAYH,KACvB9K,EAAaiL,EAAS,WAAYH,GAAa3L,MAAMsM,WAGVH,IAAzCL,EAAS,cAAeH,KACtBS,EAAQN,EAAS,cAAeH,GAAa3L,MAAMqM,MACpC,IAAfxL,IACFF,EAAaoH,IAAQwE,cAAcC,IAAOC,aAAaL,MA3DxC,kBA+DZ,IAAI/L,EACTS,EACAJ,EACA+F,EACA7K,EACA0C,EACAE,EACAE,EACAiC,EACAC,EACAC,IAzEiB,2DA4EZ,MA5EY,0DAAH,qD,2DC7RpB,2XAGM6L,EACQ,GADRA,EAES,0CAFTA,EAGO,GAHPA,EAIU,GAJVA,EAKW,iDALXA,EAMS,GAGFzF,EAAc,IAAIc,IAAQ4E,QACrCD,EACAA,EACAA,GAGW3H,EAAgB,IAAIgD,IAAQ6E,QACvCF,EACAA,EACAA,GAGWpH,EAAgB,IAAIuH,IAEpB5B,EAAW,SAGXnD,EAAY,wBAGZU,EAAe,EACfE,EAAgB,EAEhBC,EAAgB,EAChBE,EAAiB,EAEjBpO,EAAoB,C","file":"static/js/main.b0de4155.chunk.js","sourcesContent":["export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l12\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l11\\ntxna ApplicationArgs 0\\nbyte \\\"make\\\"\\n==\\nbnz main_l8\\ntxna ApplicationArgs 0\\nbyte \\\"end\\\"\\n==\\nbnz main_l5\\nerr\\nmain_l5:\\nglobal LatestTimestamp\\nbyte \\\"RESERVE_ENDS\\\"\\napp_global_get\\n>=\\nbyte \\\"RESERVED\\\"\\napp_global_get\\nint 1\\n==\\n&&\\nbyte \\\"RESERVED_TO\\\"\\napp_global_get\\ntxna Accounts 0\\n==\\n&&\\ntxn Fee\\nglobal MinTxnFee\\nint 2\\n*\\n>=\\n&&\\nbnz main_l7\\nint 0\\nreturn\\nmain_l7:\\ntxna Accounts 0\\nint 1000000\\ncallsub sendfunds_0\\nbyte \\\"RESERVED_TO\\\"\\nbyte \\\"\\\"\\napp_global_put\\nbyte \\\"RESERVE_ENDS\\\"\\nint 0\\napp_global_put\\nbyte \\\"RESERVED\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\\nmain_l8:\\nbyte \\\"RESERVED\\\"\\napp_global_get\\nint 0\\n==\\nglobal GroupSize\\nint 2\\n==\\n&&\\ngtxn 1 TypeEnum\\nint pay\\n==\\ngtxn 1 Receiver\\nglobal CurrentApplicationAddress\\n==\\n&&\\ngtxn 1 Amount\\nbyte \\\"PRICE\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n*\\nint 1000000\\n+\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\n&&\\nbnz main_l10\\nint 0\\nreturn\\nmain_l10:\\nbyte \\\"RESERVED_TO\\\"\\ntxna Accounts 0\\napp_global_put\\nbyte \\\"RESERVE_ENDS\\\"\\nglobal LatestTimestamp\\ntxna ApplicationArgs 1\\nbtoi\\nint 60\\n*\\n+\\napp_global_put\\nbyte \\\"RESERVED\\\"\\nint 1\\napp_global_put\\nint 1\\nreturn\\nmain_l11:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l12:\\ntxn NumAppArgs\\nint 4\\n==\\nassert\\ntxn Note\\nbyte \\\"hotel-reservation:uv1\\\"\\n==\\nassert\\ntxna ApplicationArgs 3\\nbtoi\\nint 0\\n>\\nassert\\nbyte \\\"NAME\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"DESCRIPTION\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"PRICE\\\"\\ntxna ApplicationArgs 3\\nbtoi\\napp_global_put\\nbyte \\\"RESERVED\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\\n\\n// send_funds\\nsendfunds_0:\\nstore 1\\nstore 0\\nitxn_begin\\nint pay\\nitxn_field TypeEnum\\nload 0\\nitxn_field Receiver\\nload 1\\nitxn_field Amount\\nint 0\\nitxn_field Fee\\nitxn_submit\\nretsub\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import { ALGORAND_DECIMALS } from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n  return Buffer.from(base64String, \"base64\").toString(\"utf-8\");\n};\n\nexport const utf8ToBase64String = (utf8String) => {\n  return Buffer.from(utf8String, \"utf8\").toString(\"base64\");\n};\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n  if (!address) return;\n  return (\n    address.slice(0, 5) +\n    \"...\" +\n    address.slice(address.length - 5, address.length)\n  );\n};\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n  if (!num) return;\n  let bigNumber = new BigNumber(num);\n  return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n};\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n  if (!str) return;\n  let bigNumber = new BigNumber(str);\n  return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n};\n\nexport const convertTime = (secs) => {\n  if (secs === 0) {\n    return \"--\";\n  }\n\n  let dateObj = new Date(secs * 1000);\n\n  let date = dateObj.toLocaleDateString(\"en-us\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n  let time = dateObj.toLocaleString(\"en-us\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true,\n  });\n  return date + \", \" + time;\n};\n","import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({name, coverImg, connect}) => {\n    return (\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n            <div className=\"mt-auto text-light mb-5\">\n                <div\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n                    style={{maxWidth: \"320px\"}}\n                >\n                    <img src={coverImg} alt=\"\"/>\n                </div>\n                <h1>{name}</h1>\n                <p>Please connect your wallet to continue.</p>\n                <Button\n                    onClick={() => connect()}\n                    variant=\"outline-light\"\n                    className=\"rounded-pill px-3 mt-3\"\n                >\n                    Connect Wallet\n                </Button>\n            </div>\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n        </div>\n    );\n};\n\nCover.propTypes = {\n    name: PropTypes.string,\n    coverImg: PropTypes.string,\n    connect: PropTypes.func\n};\n\nexport default Cover;\n","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default Identicon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;\n","import React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst AddRoom = ({ createNewRoom }) => {\n  const [name, setName] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(0);\n\n  const isFormFilled = useCallback(() => {\n    return name && image && description && price > 0;\n  }, [name, image, description, price]);\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>New Room</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <FloatingLabel\n              controlId=\"inputName\"\n              label=\"Room name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n                placeholder=\"Enter room name\"\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputUrl\"\n              label=\"Image URL\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Image URL\"\n                value={image}\n                onChange={(e) => {\n                  setImage(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                max={115}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputPrice\"\n              label=\"Price Per Night in ALGO\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Price\"\n                onChange={(e) => {\n                  setPrice(stringToMicroAlgos(e.target.value));\n                }}\n              />\n            </FloatingLabel>\n          </Modal.Body>\n        </Form>\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              createNewRoom({\n                name,\n                image,\n                description,\n                price,\n              });\n              handleClose();\n            }}\n          >\n            Save new Room\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddRoom.propTypes = {\n  createNewRoom: PropTypes.func.isRequired,\n};\n\nexport default AddRoom;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Badge,\n  Button,\n  Card,\n  Col,\n  FloatingLabel,\n  Form,\n  Stack,\n} from \"react-bootstrap\";\nimport {\n  microAlgosToString,\n  truncateAddress,\n  convertTime,\n} from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\n\nconst Room = ({\n  address,\n  room,\n  makeReservation,\n  endReservation,\n  deleteRoom,\n}) => {\n  const {\n    appId,\n    name,\n    image,\n    description,\n    price,\n    reservedTo,\n    reserveEnds,\n    isReserved,\n    appCreator,\n  } = room;\n\n  const date = Date.now();\n\n  const [noOfNights, setNoOfNights] = useState(1);\n\n  const roomIsReserved = () => isReserved === 1;\n\n  const reservationEnded = () => date >= new Date(reserveEnds * 1000);\n  return (\n    <Col key={appId}>\n      <Card className=\"h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <span className=\"font-monospace text-secondary\">\n              {reservedTo ? truncateAddress(reservedTo) : <></>}\n            </span>\n            <Identicon size={28} address={reservedTo} />\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {roomIsReserved() ? \"RESERVED\" : \"AVAILABLE\"}\n            </Badge>\n          </Stack>\n        </Card.Header>\n        <div className=\"ratio ratio-4x3\">\n          <img src={image} alt={name} style={{ objectFit: \"cover\" }} />\n        </div>\n        <Card.Body className=\"d-flex flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n          <Card.Text className=\"flex-grow-1\">\n            {reserveEnds ? `Reservation ends: ${convertTime(reserveEnds)}` : \"\"}\n          </Card.Text>\n          <Form className=\"d-flex align-content-stretch flex-row gap-2\">\n            {reservedTo === address && roomIsReserved() ? (\n              <Button\n                variant=\"outline-dark\"\n                onClick={() => endReservation(room)}\n                disabled={!reservationEnded()}\n                className=\"w-100 py-3\"\n              >\n                End Reservation\n              </Button>\n            ) : roomIsReserved() ? (\n              <>\n                <Button\n                  variant=\"outline-dark\"\n                  disabled={roomIsReserved()}\n                  className=\"w-100 py-3\"\n                >\n                  Reserved\n                </Button>\n              </>\n            ) : (\n              <>\n                <FloatingLabel\n                  controlId=\"inputCount\"\n                  label=\"Nights\"\n                  className=\"w-25\"\n                >\n                  <Form.Control\n                    type=\"number\"\n                    value={noOfNights}\n                    min=\"1\"\n                    disabled={roomIsReserved()}\n                    onChange={(e) => {\n                      setNoOfNights(Number(e.target.value));\n                    }}\n                  />\n                </FloatingLabel>\n                <Button\n                  variant=\"outline-dark\"\n                  disabled={roomIsReserved()}\n                  onClick={() => makeReservation(room, noOfNights)}\n                  className=\"w-75 py-3\"\n                >\n                  Reserve for {microAlgosToString(price) * noOfNights} ALGO\n                </Button>\n              </>\n            )}\n            {appCreator === address && (\n              <Button\n                variant=\"outline-danger\"\n                onClick={() => deleteRoom(room)}\n                className=\"btn\"\n              >\n                <i className=\"bi bi-trash\"></i>\n              </Button>\n            )}\n          </Form>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nRoom.propTypes = {\n  address: PropTypes.string.isRequired,\n  room: PropTypes.instanceOf(Object).isRequired,\n  makeReservation: PropTypes.func.isRequired,\n  endReservation: PropTypes.func.isRequired,\n  deleteRoom: PropTypes.func.isRequired,\n};\n\nexport default Room;\n","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n    <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n    />\n);\n\nconst NotificationSuccess = ({text}) => (\n    <div>\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst NotificationError = ({text}) => (\n    <div>\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst Props = {\n    text: PropTypes.string,\n};\n\nconst DefaultProps = {\n    text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport {Notification, NotificationSuccess, NotificationError};\n","import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport AddRoom from \"./AddRoom\";\nimport Room from \"./Room\";\nimport Loader from \"../utils/Loader\";\nimport { NotificationError, NotificationSuccess } from \"../utils/Notifications\";\nimport {\n  createRoomAction,\n  makeReservationAction,\n  endReservationAction,\n  deleteroomAction,\n  getRoomsAction,\n} from \"../../utils/hotel-reservation\";\nimport PropTypes from \"prop-types\";\nimport { Row } from \"react-bootstrap\";\n\nconst Rooms = ({ address, fetchBalance }) => {\n  const [rooms, setRooms] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getRooms = async () => {\n    setLoading(true);\n    getRoomsAction()\n      .then((rooms) => {\n        if (rooms) {\n          setRooms(rooms);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally((_) => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    getRooms();\n  }, []);\n\n  const createNewRoom = async (data) => {\n    setLoading(true);\n    createRoomAction(address, data)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Room added successfully.\" />);\n        getRooms();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to create room.\" />);\n        setLoading(false);\n      });\n  };\n\n  const makeReservation = async (room, noOfNights) => {\n    setLoading(true);\n    makeReservationAction(address, room, noOfNights)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Reservation made successfully\" />);\n        getRooms();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to make reservation.\" />);\n        setLoading(false);\n      });\n  };\n\n  const endReservation = async (room) => {\n    setLoading(true);\n    endReservationAction(address, room)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Reservation ended successfully\" />);\n        getRooms();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to end reservation.\" />);\n        setLoading(false);\n      });\n  };\n\n  const deleteRoom = async (room) => {\n    setLoading(true);\n    deleteroomAction(address, room.appId)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Room deleted successfully\" />);\n        getRooms();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to delete room.\" />);\n        setLoading(false);\n      });\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <>\n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\n        <h1 className=\"fs-4 fw-bold mb-0\">Hotel Rooms Reservation</h1>\n        <AddRoom createNewRoom={createNewRoom} />\n      </div>\n      <div className=\"mb-3\">\n        <i className=\"bi bi-bell-fill\"></i> Holding fee for any reservation is 1\n        Algo.\n      </div>\n      <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n        <>\n          {rooms.map((room, index) => (\n            <Room\n              address={address}\n              room={room}\n              makeReservation={makeReservation}\n              endReservation={endReservation}\n              deleteRoom={deleteRoom}\n              key={index}\n            />\n          ))}\n        </>\n      </Row>\n    </>\n  );\n};\n\nRooms.propTypes = {\n  address: PropTypes.string.isRequired,\n  fetchBalance: PropTypes.func.isRequired,\n};\n\nexport default Rooms;\n","export default __webpack_public_path__ + \"static/media/hotelroom.76d53c1d.jpg\";","import React, { useState } from \"react\";\nimport Cover from \"./components/Cover\";\nimport \"./App.css\";\nimport Wallet from \"./components/Wallet\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport Rooms from \"./components/hotel-reservation/Rooms\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\nimport { Notification } from \"./components/utils/Notifications\";\nimport coverImg from \"./assets/img/hotelroom.jpg\";\n\nconst App = function AppWrapper() {\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n    indexerClient\n      .lookupAccountByID(accountAddress)\n      .do()\n      .then((response) => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const connectWallet = async () => {\n    myAlgoConnect\n      .connect()\n      .then((accounts) => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        setName(_account.name);\n        fetchBalance(_account.address);\n      })\n      .catch((error) => {\n        console.log(\"Could not connect to MyAlgo wallet\");\n        console.error(error);\n      });\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setName(null);\n    setBalance(null);\n  };\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                name={name}\n                amount={balance}\n                disconnect={disconnect}\n                symbol={\"ALGO\"}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Rooms address={address} fetchBalance={fetchBalance} />\n          </main>\n        </Container>\n      ) : (\n        <Cover\n          name={\"Hotel Room Reservations\"}\n          coverImg={coverImg}\n          connect={connectWallet}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk from \"algosdk\";\nimport { Base64 } from \"js-base64\";\nimport {\n  algodClient,\n  indexerClient,\n  hotelNote,\n  minRound,\n  myAlgoConnect,\n  numGlobalBytes,\n  numGlobalInts,\n  numLocalBytes,\n  numLocalInts,\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/hotel_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/hotel_clear.teal\";\nimport { base64ToUTF8String, utf8ToBase64String } from \"./conversions\";\n\nclass Room {\n  constructor(\n    appCreator,\n    appId,\n    appAddress,\n    name,\n    image,\n    description,\n    price,\n    reservedTo,\n    reserveEnds,\n    isReserved\n  ) {\n    this.appId = appId;\n    this.appCreator = appCreator;\n    this.appAddress = appAddress;\n    this.name = name;\n    this.image = image;\n    this.description = description;\n    this.price = price;\n    this.reservedTo = reservedTo;\n    this.reserveEnds = reserveEnds;\n    this.isReserved = isReserved;\n  }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await algodClient.compile(programBytes).do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n};\n\n// CREATE ROOM: ApplicationCreateTxn\nexport const createRoomAction = async (senderAddress, room) => {\n  console.log(\"Adding room...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Compile programs\n  const compiledApprovalProgram = await compileProgram(approvalProgram);\n  const compiledClearProgram = await compileProgram(clearProgram);\n\n  // Build note to identify transaction later and required app args as Uint8Arrays\n  let note = new TextEncoder().encode(hotelNote);\n  let name = new TextEncoder().encode(room.name);\n  let image = new TextEncoder().encode(room.image);\n  let description = new TextEncoder().encode(room.description);\n  let price = algosdk.encodeUint64(room.price);\n\n  let appArgs = [name, image, description, price];\n\n  // Create ApplicationCreateTxn\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    approvalProgram: compiledApprovalProgram,\n    clearProgram: compiledClearProgram,\n    numLocalInts: numLocalInts,\n    numLocalByteSlices: numLocalBytes,\n    numGlobalInts: numGlobalInts,\n    numGlobalByteSlices: numGlobalBytes,\n    note: note,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get created application id and notify about completion\n  let transactionResponse = await algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"application-index\"];\n  console.log(\"Created new app-id: \", appId);\n  return appId;\n};\n\n// Reserve room: Group transaction consisting of ApplicationCallTxn and PaymentTxn\nexport const makeReservationAction = async (\n  senderAddress,\n  room,\n  noOfNights\n) => {\n  console.log(\"Reserving room...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let appCallArg = new TextEncoder().encode(\"make\");\n  let noOfNightsArg = algosdk.encodeUint64(noOfNights);\n  let appArgs = [appCallArg, noOfNightsArg];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: room.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  let totalAmount = room.price * noOfNights + 1000000; // fee\n\n  // Create PaymentTxn\n  let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: senderAddress,\n    to: room.appAddress,\n    amount: totalAmount,\n    suggestedParams: params,\n  });\n\n  let txnArray = [appCallTxn, paymentTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// End Reservation room: ApplicationCallTxn\nexport const endReservationAction = async (senderAddress, room) => {\n  console.log(\"Ending reservation...\");\n\n  let params = await algodClient.getTransactionParams().do();\n  params.fee = algosdk.ALGORAND_MIN_TX_FEE * 2;\n  params.flatFee = true;\n\n  // Build required app args as Uint8Array\n  let appCallArg = new TextEncoder().encode(\"end\");\n  let appArgs = [appCallArg];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: room.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = appCallTxn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await myAlgoConnect.signTransaction(appCallTxn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DELETE room: ApplicationDeleteTxn\nexport const deleteroomAction = async (senderAddress, index) => {\n  console.log(\"Deleting application...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Create ApplicationDeleteTxn\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: index,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get application id of deleted application and notify about completion\n  let transactionResponse = await algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n  console.log(\"Deleted app-id: \", appId);\n};\n\n// GET roomS: Use indexer\nexport const getRoomsAction = async () => {\n  console.log(\"Fetching rooms...\");\n  let note = new TextEncoder().encode(hotelNote);\n  let encodedNote = Buffer.from(note).toString(\"base64\");\n\n  // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n  let transactionInfo = await indexerClient\n    .searchForTransactions()\n    .notePrefix(encodedNote)\n    .txType(\"appl\")\n    .minRound(minRound)\n    .do();\n\n  let rooms = [];\n  for (const transaction of transactionInfo.transactions) {\n    let appId = transaction[\"created-application-index\"];\n    if (appId) {\n      // Step 2: Get each application by application id\n      let room = await getApplication(appId);\n      if (room) {\n        rooms.push(room);\n      }\n    }\n  }\n  console.log(\"rooms fetched.\");\n  return rooms;\n};\n\nconst getApplication = async (appId) => {\n  try {\n    // 1. Get application by appId\n    let response = await indexerClient\n      .lookupApplications(appId)\n      .includeAll(true)\n      .do();\n    if (response.application.deleted) {\n      return null;\n    }\n    let globalState = response.application.params[\"global-state\"];\n\n    // 2. Parse fields of response and return room\n    let appCreator = response.application.params.creator;\n    let appAddress = algosdk.getApplicationAddress(appId);\n    let name = \"\";\n    let image = \"\";\n    let description = \"\";\n    let price = 0;\n    let reservedTo = \"\";\n    let reserveEnds = 0;\n    let isReserved = 0;\n\n    const getField = (fieldName, globalState) => {\n      return globalState.find((state) => {\n        return state.key === utf8ToBase64String(fieldName);\n      });\n    };\n\n    if (getField(\"NAME\", globalState) !== undefined) {\n      let field = getField(\"NAME\", globalState).value.bytes;\n      name = base64ToUTF8String(field);\n    }\n\n    if (getField(\"IMAGE\", globalState) !== undefined) {\n      let field = getField(\"IMAGE\", globalState).value.bytes;\n      image = base64ToUTF8String(field);\n    }\n\n    if (getField(\"DESCRIPTION\", globalState) !== undefined) {\n      let field = getField(\"DESCRIPTION\", globalState).value.bytes;\n      description = base64ToUTF8String(field);\n    }\n\n    if (getField(\"PRICE\", globalState) !== undefined) {\n      price = getField(\"PRICE\", globalState).value.uint;\n    }\n\n    if (getField(\"RESERVE_ENDS\", globalState) !== undefined) {\n      reserveEnds = getField(\"RESERVE_ENDS\", globalState).value.uint;\n    }\n\n    if (getField(\"RESERVED\", globalState) !== undefined) {\n      isReserved = getField(\"RESERVED\", globalState).value.uint;\n    }\n\n    if (getField(\"RESERVED_TO\", globalState) !== undefined) {\n      let field = getField(\"RESERVED_TO\", globalState).value.bytes;\n      if (isReserved === 1) {\n        reservedTo = algosdk.encodeAddress(Base64.toUint8Array(field));\n      }\n    }\n\n    return new Room(\n      appCreator,\n      appId,\n      appAddress,\n      name,\n      image,\n      description,\n      price,\n      reservedTo,\n      reserveEnds,\n      isReserved\n    );\n  } catch (err) {\n    return null;\n  }\n};\n","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n  algodToken: \"\",\n  algodServer: \"https://node.testnet.algoexplorerapi.io\",\n  algodPort: \"\",\n  indexerToken: \"\",\n  indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n  indexerPort: \"\",\n};\n\nexport const algodClient = new algosdk.Algodv2(\n  config.algodToken,\n  config.algodServer,\n  config.algodPort\n);\n\nexport const indexerClient = new algosdk.Indexer(\n  config.indexerToken,\n  config.indexerServer,\n  config.indexerPort\n);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const hotelNote = \"hotel-reservation:uv1\";\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 3; // Global variables stored as Int: count, sold\nexport const numGlobalBytes = 4; // Global variables stored as Bytes: name, description, image\n\nexport const ALGORAND_DECIMALS = 6;\n"],"sourceRoot":""}